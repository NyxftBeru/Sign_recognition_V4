{"mappings":"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","sources":["app.js"],"sourcesContent":["// Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCAGZ7rVYkdi3v4NPZuPQxpFN0PBU561kA\",\r\n    authDomain: \"c300-8be63.firebaseapp.com\",\r\n    projectId: \"c300-8be63\",\r\n    storageBucket: \"c300-8be63.firebasestorage.app\",\r\n    messagingSenderId: \"209053023145\",\r\n    appId: \"1:209053023145:web:d565dfc17b478e2f6222b8\",\r\n    measurementId: \"G-K17THG0XGW\"\r\n};\r\n\r\n// OpenAI configuration\r\nconst OPENAI_API_KEY = \"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\";\r\nconst OPENAI_API_URL = \"https://api.openai.com/v1/chat/completions\";\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst db = firebase.firestore();\r\n\r\n// Quiz application class\r\nclass SignLanguageQuiz {\r\n    constructor() {\r\n        this.signs = [];\r\n        this.currentQuestionIndex = 0;\r\n        this.score = 0;\r\n        this.userAnswers = [];\r\n        this.questionOptions = []; // Store options for each question\r\n        this.isQuizSubmitted = false;\r\n        this.currentReviewIndex = 0; // For review mode navigation\r\n        this.isInReviewMode = false; // Track if we're in review mode\r\n        this.isInResultsSummary = false; // Track if we're viewing results summary\r\n        this.aiSentence = null; // Store generated sentence for Q6\r\n        this.chatSkipAnimations = false; // Track if user wants to skip chat animations\r\n        \r\n        // Optimization: Cache for API responses and Firestore data\r\n        this.openaiCache = this.loadOpenAICache();\r\n        this.firestoreCache = this.loadFirestoreCache();\r\n        this.isDataLoaded = false; // Track if initial data load is complete\r\n        \r\n        // Set OpenAI API key\r\n        this.openaiApiKey = OPENAI_API_KEY;\r\n        \r\n        // OpenAI API is enabled by default\r\n        this.openaiDisabled = false;\r\n        \r\n        this.initializeElements();\r\n        this.bindEvents();\r\n        this.loadQuizData();\r\n    }\r\n\r\n    initializeElements() {\r\n        this.loadingElement = document.getElementById('loading');\r\n        this.quizContainer = document.getElementById('quiz-container');\r\n        this.resultsContainer = document.getElementById('results-container');\r\n        this.questionCounterElement = document.getElementById('question-counter');\r\n        this.signVideo = document.getElementById('sign-video');\r\n        this.optionsContainer = document.getElementById('options-container');\r\n        this.replayBtn = document.getElementById('replay-btn');\r\n        this.nextBtn = document.getElementById('next-btn');\r\n        this.submitBtn = document.getElementById('submit-btn');\r\n        this.finalScoreElement = document.getElementById('final-score');\r\n        this.resultsDetailsElement = document.getElementById('results-details');\r\n        this.restartBtn = document.getElementById('restart-btn');\r\n        this.restartBtnReview = document.getElementById('restart-btn-review');\r\n        \r\n        // Progress bar elements\r\n        this.progressFill = document.getElementById('progress-fill');\r\n        this.progressText = document.getElementById('progress-text');\r\n        \r\n        // Review mode elements\r\n        this.reviewModeBtn = document.getElementById('review-mode-btn');\r\n        this.summaryModeBtn = document.getElementById('summary-mode-btn');\r\n        this.resultsSummary = document.getElementById('results-summary');\r\n        this.reviewMode = document.getElementById('review-mode');\r\n        this.reviewQuestionTitle = document.getElementById('review-question-title');\r\n        this.reviewStatus = document.getElementById('review-status');\r\n        this.reviewVideo = document.getElementById('review-video');\r\n        this.reviewVideoContainer = document.querySelector('.review-video-container');\r\n        this.reviewUserAnswer = document.getElementById('review-user-answer');\r\n        this.reviewCorrectAnswer = document.getElementById('review-correct-answer');\r\n        this.reviewPrevBtn = document.getElementById('review-prev-btn');\r\n        this.reviewNextBtn = document.getElementById('review-next-btn');\r\n        this.reviewQuestionCounter = document.getElementById('review-question-counter');\r\n        \r\n        // Chat elements\r\n        this.chatSkipBtn = document.getElementById('chat-skip-btn');\r\n        \r\n        // Sidebar elements\r\n        this.sidebar = document.getElementById('sidebar');\r\n        this.sidebarToggle = document.getElementById('sidebar-toggle');\r\n        this.questionListSection1 = document.getElementById('question-list-section1');\r\n        this.questionListSection2 = document.getElementById('question-list-section2');\r\n        this.questionListSection3 = document.getElementById('question-list-section3');\r\n        this.container = document.querySelector('.container');\r\n    }\r\n\r\n    bindEvents() {\r\n        this.replayBtn.addEventListener('click', () => this.replayVideo());\r\n        this.nextBtn.addEventListener('click', () => this.nextQuestion());\r\n        this.submitBtn.addEventListener('click', () => this.submitQuiz());\r\n        this.restartBtn.addEventListener('click', () => this.restartQuiz());\r\n        this.restartBtnReview.addEventListener('click', () => this.restartQuiz());\r\n        \r\n        // Review mode events\r\n        this.reviewModeBtn.addEventListener('click', () => this.enterReviewMode());\r\n        this.summaryModeBtn.addEventListener('click', () => this.exitReviewMode());\r\n        this.reviewPrevBtn.addEventListener('click', () => this.reviewPreviousQuestion());\r\n        this.reviewNextBtn.addEventListener('click', () => this.reviewNextQuestion());\r\n        \r\n        // Chat skip button event\r\n        this.chatSkipBtn.addEventListener('click', () => this.skipChatAnimations());\r\n        \r\n        // Sidebar events\r\n        this.sidebarToggle.addEventListener('click', () => this.toggleSidebar());\r\n        \r\n        // Close sidebar when clicking outside on mobile\r\n        document.addEventListener('click', (e) => {\r\n            if (window.innerWidth <= 768) {\r\n                if (!this.sidebar.contains(e.target) && !e.target.closest('.sidebar-toggle')) {\r\n                    this.sidebar.classList.remove('open');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Cache Management Methods\r\n    loadOpenAICache() {\r\n        try {\r\n            const cached = localStorage.getItem('signQuiz_openaiCache');\r\n            return cached ? JSON.parse(cached) : {};\r\n        } catch (error) {\r\n            console.warn('Failed to load OpenAI cache:', error);\r\n            return {};\r\n        }\r\n    }\r\n\r\n    saveOpenAICache() {\r\n        try {\r\n            localStorage.setItem('signQuiz_openaiCache', JSON.stringify(this.openaiCache));\r\n        } catch (error) {\r\n            console.warn('Failed to save OpenAI cache:', error);\r\n        }\r\n    }\r\n\r\n    loadFirestoreCache() {\r\n        try {\r\n            const cached = localStorage.getItem('signQuiz_firestoreCache');\r\n            const data = cached ? JSON.parse(cached) : null;\r\n            \r\n            // Check if cache is still valid (24 hours)\r\n            if (data && data.timestamp && (Date.now() - data.timestamp < 24 * 60 * 60 * 1000)) {\r\n                return data.signs;\r\n            }\r\n            return null;\r\n        } catch (error) {\r\n            console.warn('Failed to load Firestore cache:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    saveFirestoreCache(signs) {\r\n        try {\r\n            const cacheData = {\r\n                signs: signs,\r\n                timestamp: Date.now()\r\n            };\r\n            localStorage.setItem('signQuiz_firestoreCache', JSON.stringify(cacheData));\r\n        } catch (error) {\r\n            console.warn('Failed to save Firestore cache:', error);\r\n            if (error.name === 'QuotaExceededError') {\r\n                console.log('🧹 Clearing old cache to free up space...');\r\n                try {\r\n                    // Clear old cache and try again\r\n                    localStorage.removeItem('signQuiz_firestoreCache');\r\n                    localStorage.setItem('signQuiz_firestoreCache', JSON.stringify({\r\n                        signs: signs,\r\n                        timestamp: Date.now()\r\n                    }));\r\n                    console.log('✅ Cache saved after cleanup');\r\n                } catch (retryError) {\r\n                    console.warn('❌ Still cannot save cache after cleanup:', retryError);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Cache clearing methods (useful for debugging or forcing refresh)\r\n    clearAllCache() {\r\n        try {\r\n            localStorage.removeItem('signQuiz_openaiCache');\r\n            localStorage.removeItem('signQuiz_firestoreCache');\r\n            this.openaiCache = {};\r\n            this.firestoreCache = null;\r\n            console.log('All cache cleared');\r\n        } catch (error) {\r\n            console.warn('Failed to clear cache:', error);\r\n        }\r\n    }\r\n\r\n    clearOpenAICache() {\r\n        try {\r\n            localStorage.removeItem('signQuiz_openaiCache');\r\n            this.openaiCache = {};\r\n            console.log('OpenAI cache cleared');\r\n        } catch (error) {\r\n            console.warn('Failed to clear OpenAI cache:', error);\r\n        }\r\n    }\r\n\r\n    async loadQuizData() {\r\n        try {\r\n            console.log('Loading quiz data...');\r\n            \r\n            // Try to use cached Firestore data first\r\n            if (this.firestoreCache && this.firestoreCache.length > 0) {\r\n                console.log('Using cached Firestore data');\r\n                this.signs = [...this.firestoreCache];\r\n                this.isDataLoaded = true;\r\n            } else {\r\n                console.log('Loading fresh data from Firestore...');\r\n                const signsCollection = await db.collection('signs').get();\r\n                \r\n                if (signsCollection.empty) {\r\n                    throw new Error('No signs found in the collection');\r\n                }\r\n\r\n                this.signs = [];\r\n                signsCollection.forEach(doc => {\r\n                    const data = doc.data();\r\n                    if (data.base64) {\r\n                        this.signs.push({\r\n                            id: doc.id,\r\n                            name: doc.id,\r\n                            base64: data.base64\r\n                        });\r\n                    }\r\n                });\r\n\r\n                console.log(`Loaded ${this.signs.length} signs from Firestore`);\r\n\r\n                if (this.signs.length === 0) {\r\n                    throw new Error('No valid signs with base64 data found');\r\n                }\r\n\r\n                // Cache the loaded data\r\n                this.saveFirestoreCache(this.signs);\r\n                this.isDataLoaded = true;\r\n            }\r\n\r\n            // Shuffle the signs for random order\r\n            this.shuffleArray(this.signs);\r\n            \r\n            this.hideLoading();\r\n            this.generateSidebar();\r\n            this.startQuiz();\r\n        } catch (error) {\r\n            console.error('Error loading quiz data:', error);\r\n            this.showError('Failed to load quiz data. Please check your internet connection and try again.');\r\n        }\r\n    }\r\n\r\n    generateSidebar() {\r\n        this.questionListSection1.innerHTML = '';\r\n        this.questionListSection2.innerHTML = '';\r\n        this.questionListSection3.innerHTML = '';\r\n        \r\n        this.signs.forEach((sign, index) => {\r\n            const questionItem = document.createElement('div');\r\n            questionItem.className = 'question-item';\r\n            questionItem.innerHTML = `\r\n                <span class=\"question-number\">${index + 1}</span>\r\n            `;\r\n            \r\n            questionItem.addEventListener('click', () => this.navigateToQuestion(index));\r\n            \r\n            // Add to appropriate section (first 5 in section 1, next 5 in section 2, rest in section 3)\r\n            if (index < 5) {\r\n                this.questionListSection1.appendChild(questionItem);\r\n            } else if (index < 10) {\r\n                this.questionListSection2.appendChild(questionItem);\r\n            } else {\r\n                this.questionListSection3.appendChild(questionItem);\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleSidebar() {\r\n        if (window.innerWidth <= 768) {\r\n            this.sidebar.classList.toggle('open');\r\n        } else {\r\n            this.sidebar.classList.toggle('collapsed');\r\n            this.container.classList.toggle('sidebar-collapsed');\r\n        }\r\n    }\r\n\r\n    navigateToQuestion(index) {\r\n        if (index >= 0 && index < this.signs.length) {\r\n            // Prevent navigation when viewing results summary\r\n            if (this.isInResultsSummary) {\r\n                return; // Do nothing when on results summary page\r\n            }\r\n            \r\n            if (this.isInReviewMode) {\r\n                // Navigate in review mode\r\n                this.currentReviewIndex = index;\r\n                this.displayReviewQuestion();\r\n            } else {\r\n                // Navigate in quiz mode\r\n                this.currentQuestionIndex = index;\r\n                this.displayQuestion();\r\n            }\r\n            this.updateSidebarHighlight();\r\n            \r\n            // Close sidebar on mobile after navigation\r\n            if (window.innerWidth <= 768) {\r\n                this.sidebar.classList.remove('open');\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSidebarHighlight() {\r\n        // Get question items from all sections\r\n        const section1Items = this.questionListSection1.querySelectorAll('.question-item');\r\n        const section2Items = this.questionListSection2.querySelectorAll('.question-item');\r\n        const section3Items = this.questionListSection3.querySelectorAll('.question-item');\r\n        const allQuestionItems = [...section1Items, ...section2Items, ...section3Items];\r\n        \r\n        // Determine which index to highlight based on mode\r\n        const currentIndex = this.isInReviewMode ? this.currentReviewIndex : this.currentQuestionIndex;\r\n        \r\n        allQuestionItems.forEach((item, index) => {\r\n            item.classList.remove('current', 'answered', 'incorrect');\r\n            \r\n            // Don't show current question when viewing results summary\r\n            if (!this.isInResultsSummary && index === currentIndex) {\r\n                item.classList.add('current');\r\n            } else {\r\n                const userAnswer = this.userAnswers[index];\r\n                if (userAnswer) {\r\n                    item.classList.add('answered');\r\n                    // Only show correct/incorrect after quiz is submitted\r\n                    if (this.isQuizSubmitted && userAnswer.isCorrect === false) {\r\n                        item.classList.add('incorrect');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n\r\n    hideLoading() {\r\n        this.loadingElement.classList.add('hidden');\r\n        this.quizContainer.classList.remove('hidden');\r\n    }\r\n\r\n    showError(message) {\r\n        this.loadingElement.innerHTML = `\r\n            <div class=\"error-message\">\r\n                <h3>Error</h3>\r\n                <p>${message}</p>\r\n                <button onclick=\"location.reload()\" class=\"btn btn-primary\">Retry</button>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    startQuiz() {\r\n        this.currentQuestionIndex = 0;\r\n        this.score = 0;\r\n        this.userAnswers = new Array(this.signs.length).fill(null);\r\n        this.isQuizSubmitted = false;\r\n        this.isInReviewMode = false; // Reset review mode\r\n        this.isInResultsSummary = false; // Reset results summary mode\r\n        this.aiSentence = null;\r\n        \r\n        // Generate consistent options for all questions\r\n        this.generateAllQuestionOptions();\r\n        \r\n        // Reset question text\r\n        this.resetQuestionText();\r\n        \r\n        this.updateUI();\r\n        this.updateProgressBar(); // Initialize progress bar\r\n        this.displayQuestion();\r\n        this.updateSidebarHighlight();\r\n    }\r\n\r\n    generateAllQuestionOptions() {\r\n        this.questionOptions = [];\r\n        \r\n        this.signs.forEach(correctSign => {\r\n            const options = [correctSign];\r\n            const availableSigns = this.signs.filter(sign => sign.id !== correctSign.id);\r\n            \r\n            // Add 3 random wrong options\r\n            const wrongOptions = [...availableSigns];\r\n            this.shuffleArray(wrongOptions);\r\n            \r\n            for (let i = 0; i < 3 && i < wrongOptions.length; i++) {\r\n                options.push(wrongOptions[i]);\r\n            }\r\n            \r\n            // Shuffle options for this question\r\n            this.shuffleArray(options);\r\n            this.questionOptions.push(options);\r\n        });\r\n    }\r\n\r\n    async batchGenerateSentencesForSection2() {\r\n        try {\r\n            // Get words for Questions 6-10 (indices 5-9)\r\n            const section2Words = this.signs.slice(5, 10).map(sign => sign.name);\r\n            \r\n            // Check if we already have ALL sentences cached\r\n            const missingWords = section2Words.filter(word => !this.openaiCache[word]);\r\n            \r\n            if (missingWords.length === 0) {\r\n                console.log('✅ All Section 2 sentences already cached!');\r\n                return true;\r\n            }\r\n            \r\n            console.log(`🔄 Generating sentences for ${missingWords.length} words in batch:`, missingWords);\r\n            \r\n            // Ultra-efficient: Generate ALL missing sentences in ONE API call\r\n            const batchPrompt = `Create simple, educational sentences for sign language learning. For each word provided, create ONE sentence using that word. The sentences should be practical and suitable for fill-in-the-blank exercises.\r\n\r\nWords: ${missingWords.join(', ')}\r\n\r\nFormat your response as:\r\n1. [word1]: [sentence with word1]\r\n2. [word2]: [sentence with word2]\r\netc.\r\n\r\nExample format:\r\n1. practice: I need to practice my skills every day.\r\n2. explain: Please explain the concept to me.`;\r\n\r\n            const response = await fetch(OPENAI_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${OPENAI_API_KEY}`\r\n                },\r\n                body: JSON.stringify({\r\n                    model: \"gpt-4o-mini\",\r\n                    messages: [\r\n                        {\r\n                            role: \"system\",\r\n                            content: \"You are an educational assistant. Create simple, clear sentences for sign language learning. Follow the exact format requested.\"\r\n                        },\r\n                        {\r\n                            role: \"user\",\r\n                            content: batchPrompt\r\n                        }\r\n                    ],\r\n                    max_tokens: 200,\r\n                    temperature: 0.7\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            const batchResponse = data.choices[0].message.content.trim();\r\n            \r\n            // Parse the batch response and cache each sentence\r\n            const lines = batchResponse.split('\\n');\r\n            lines.forEach(line => {\r\n                const match = line.match(/^\\d+\\.\\s*([^:]+):\\s*(.+)$/);\r\n                if (match) {\r\n                    const word = match[1].trim().toLowerCase();\r\n                    const sentence = match[2].trim();\r\n                    \r\n                    // Cache the sentence\r\n                    this.openaiCache[word] = sentence;\r\n                    console.log(`💾 Cached sentence for \"${word}\": ${sentence}`);\r\n                }\r\n            });\r\n            \r\n            // Save the updated cache\r\n            this.saveOpenAICache();\r\n            console.log(`✅ Batch generated and cached sentences for ${missingWords.length} words`);\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Error in batch sentence generation:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async generateSentenceWithOpenAI(word) {\r\n        try {\r\n            // Check cache first\r\n            if (this.openaiCache[word]) {\r\n                console.log(`Using cached sentence for word: ${word}`);\r\n                return this.openaiCache[word];\r\n            }\r\n\r\n            const prompt = `Create a simple, clear sentence using the word \"${word}\". The sentence should be educational and suitable for sign language learning. Make it practical and easy to understand. Return only the sentence, nothing else.`;\r\n            \r\n            console.log('Sending request to OpenAI API for word:', word);\r\n            console.log('API URL:', OPENAI_API_URL);\r\n            \r\n            const response = await fetch(OPENAI_API_URL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${OPENAI_API_KEY}`\r\n                },\r\n                body: JSON.stringify({\r\n                    model: \"gpt-4o-mini\",\r\n                    messages: [\r\n                        {\r\n                            role: \"system\",\r\n                            content: \"You are an educational assistant helping create sentences for sign language learning. Respond with only the requested sentence, no additional text.\"\r\n                        },\r\n                        {\r\n                            role: \"user\",\r\n                            content: prompt\r\n                        }\r\n                    ],\r\n                    max_tokens: 50,\r\n                    temperature: 0.7\r\n                })\r\n            });\r\n\r\n            console.log('Response status:', response.status);\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('HTTP error response:', errorText);\r\n                throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log('Full API response:', data);\r\n            \r\n            if (data.choices && data.choices[0] && data.choices[0].message) {\r\n                const generatedText = data.choices[0].message.content.trim();\r\n                console.log('Generated sentence:', generatedText);\r\n                \r\n                // Cache the result\r\n                this.openaiCache[word] = generatedText;\r\n                this.saveOpenAICache();\r\n                \r\n                return generatedText;\r\n            } else {\r\n                console.error('Invalid response format:', data);\r\n                throw new Error('Invalid response format from OpenAI API');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error generating sentence with OpenAI:', error);\r\n            throw error; // Re-throw to handle in calling function\r\n        }\r\n    }\r\n\r\n    async evaluateSection3Answers() {\r\n        console.log('🔍 Evaluating Section 3 answers with OpenAI...');\r\n        \r\n        // Get Section 3 answers that need evaluation\r\n        const section3Answers = this.userAnswers.slice(10).filter(answer => \r\n            answer && answer.userAnswer && answer.userAnswer.trim().length > 0);\r\n        \r\n        if (section3Answers.length === 0) {\r\n            console.log('No Section 3 answers to evaluate');\r\n            return;\r\n        }\r\n        \r\n        // Batch evaluate all Section 3 answers in one API call for efficiency\r\n        try {\r\n            const evaluations = await this.batchEvaluateSection3(section3Answers);\r\n            \r\n            // Apply evaluations to answers\r\n            section3Answers.forEach((answer, index) => {\r\n                if (evaluations[index]) {\r\n                    answer.evaluation = evaluations[index].feedback;\r\n                    answer.score = evaluations[index].score;\r\n                    answer.isCorrect = evaluations[index].score >= 7; // 7/10 or higher is \"correct\"\r\n                    \r\n                    // Add to score if correct\r\n                    if (answer.isCorrect) {\r\n                        this.score++;\r\n                    }\r\n                }\r\n            });\r\n            \r\n            console.log('✅ Section 3 evaluation completed');\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Failed to evaluate Section 3:', error);\r\n            \r\n            // Provide fallback scoring for Section 3 when OpenAI fails\r\n            console.log('🔄 Using fallback evaluation for Section 3...');\r\n            section3Answers.forEach((answer, index) => {\r\n                // Simple fallback: give credit if they provided a reasonable answer\r\n                const answerLength = answer.userAnswer ? answer.userAnswer.trim().length : 0;\r\n                const hasValidAnswer = answerLength >= 10; // At least 10 characters\r\n                \r\n                answer.evaluation = hasValidAnswer \r\n                    ? \"Your answer was submitted successfully. Due to technical limitations, detailed AI evaluation is currently unavailable.\" \r\n                    : \"Please provide a more detailed description of the sign gesture.\";\r\n                answer.score = hasValidAnswer ? 7 : 3; // Give benefit of doubt for valid attempts\r\n                answer.isCorrect = hasValidAnswer;\r\n                \r\n                // Add to score if correct\r\n                if (answer.isCorrect) {\r\n                    this.score++;\r\n                }\r\n            });\r\n            \r\n            console.log('✅ Section 3 fallback evaluation completed');\r\n        }\r\n    }\r\n\r\n    async batchEvaluateSection3(answers) {\r\n        // Create cache key for this batch of answers\r\n        const cacheKey = 'section3_evaluation_' + JSON.stringify(answers.map(a => ({\r\n            word: a.question,\r\n            answer: a.userAnswer.trim()\r\n        })));\r\n        \r\n        // Check cache first\r\n        if (this.openaiCache[cacheKey]) {\r\n            console.log('📋 Using cached Section 3 evaluation');\r\n            return this.openaiCache[cacheKey];\r\n        }\r\n        \r\n        console.log('🔄 Generating fresh Section 3 evaluation...');\r\n        \r\n        // Prepare evaluation prompt\r\n        const evaluationPrompt = this.createSection3EvaluationPrompt(answers);\r\n        \r\n        try {\r\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${this.openaiApiKey}`\r\n                },\r\n                body: JSON.stringify({\r\n                    model: 'gpt-4o-mini',\r\n                    messages: [\r\n                        {\r\n                            role: 'system',\r\n                            content: 'You are an expert sign language instructor evaluating student descriptions of sign gestures. Provide constructive feedback and a score (1-10) for each answer.'\r\n                        },\r\n                        {\r\n                            role: 'user',\r\n                            content: evaluationPrompt\r\n                        }\r\n                    ],\r\n                    max_tokens: 800,\r\n                    temperature: 0.3\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('❌ OpenAI API Error Details for Section 3:', {\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    errorBody: errorText,\r\n                    apiKeyFormat: this.openaiApiKey ? `${this.openaiApiKey.substring(0, 7)}...${this.openaiApiKey.substring(this.openaiApiKey.length - 4)}` : 'undefined'\r\n                });\r\n                throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            const evaluationText = data.choices[0].message.content.trim();\r\n            \r\n            // Parse the evaluation response\r\n            const evaluations = this.parseSection3Evaluation(evaluationText, answers.length);\r\n            \r\n            // Cache the result\r\n            this.openaiCache[cacheKey] = evaluations;\r\n            this.saveOpenAICache();\r\n            \r\n            console.log('💾 Cached Section 3 evaluation');\r\n            return evaluations;\r\n            \r\n        } catch (error) {\r\n            console.error('❌ Error in Section 3 batch evaluation:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    createSection3EvaluationPrompt(answers) {\r\n        let prompt = \"Please evaluate these sign language gesture descriptions. For each answer, provide:\\n\";\r\n        prompt += \"1. A score from 1-10 (where 7+ is considered good)\\n\";\r\n        prompt += \"2. Brief constructive feedback\\n\\n\";\r\n        prompt += \"Format your response as:\\n\";\r\n        prompt += \"ANSWER 1: Score: X/10 | Feedback: [your feedback]\\n\";\r\n        prompt += \"ANSWER 2: Score: X/10 | Feedback: [your feedback]\\n\";\r\n        prompt += \"etc.\\n\\n\";\r\n        \r\n        answers.forEach((answer, index) => {\r\n            prompt += `QUESTION ${index + 1}: Describe how to perform the \"${answer.question}\" sign\\n`;\r\n            prompt += `STUDENT ANSWER: ${answer.userAnswer}\\n\\n`;\r\n        });\r\n        \r\n        return prompt;\r\n    }\r\n\r\n    parseSection3Evaluation(evaluationText, expectedCount) {\r\n        const evaluations = [];\r\n        const lines = evaluationText.split('\\n');\r\n        \r\n        for (let i = 0; i < expectedCount; i++) {\r\n            const pattern = new RegExp(`ANSWER ${i + 1}:\\\\s*Score:\\\\s*(\\\\d+)/10\\\\s*\\\\|\\\\s*Feedback:\\\\s*(.+)`, 'i');\r\n            \r\n            let found = false;\r\n            for (const line of lines) {\r\n                const match = line.match(pattern);\r\n                if (match) {\r\n                    evaluations.push({\r\n                        score: parseInt(match[1]),\r\n                        feedback: match[2].trim()\r\n                    });\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            // Fallback if parsing fails\r\n            if (!found) {\r\n                evaluations.push({\r\n                    score: 5,\r\n                    feedback: \"Unable to parse evaluation. Please review manually.\"\r\n                });\r\n            }\r\n        }\r\n        \r\n        return evaluations;\r\n    }\r\n\r\n    showEvaluationLoading() {\r\n        const loadingElement = document.createElement('div');\r\n        loadingElement.id = 'evaluation-loading';\r\n        loadingElement.className = 'evaluation-loading';\r\n        loadingElement.innerHTML = `\r\n            <div class=\"evaluation-spinner\"></div>\r\n            <p>Evaluating your Section 3 answers...</p>\r\n            <small>This may take a moment</small>\r\n        `;\r\n        \r\n        // Add to main container\r\n        const main = document.querySelector('main');\r\n        main.appendChild(loadingElement);\r\n        \r\n        // Hide after evaluation is complete\r\n        setTimeout(() => {\r\n            if (loadingElement && loadingElement.parentNode) {\r\n                loadingElement.remove();\r\n            }\r\n        }, 10000); // Remove after 10 seconds max\r\n    }\r\n\r\n    async displayQuestion() {\r\n        const currentSign = this.signs[this.currentQuestionIndex];\r\n        \r\n        // Set video source\r\n        this.signVideo.src = `data:video/mp4;base64,${currentSign.base64}`;\r\n        \r\n        // Use pre-generated options for this question (except Section 3)\r\n        if (this.currentQuestionIndex < 10) {\r\n            const options = this.questionOptions[this.currentQuestionIndex];\r\n            this.displayOptions(options);\r\n        } else {\r\n            // Section 3 - no multiple choice options, just display text input\r\n            this.displayOptions([]);\r\n        }\r\n        \r\n        // Hide/show main video based on question type\r\n        const videoContainer = document.querySelector('.video-container');\r\n        const quizContainer = document.querySelector('.quiz-container');\r\n        if (this.currentQuestionIndex >= 10) {\r\n            // Questions 11-15 (Section 3) - hide main video and show text input for describing steps\r\n            videoContainer.style.display = 'none';\r\n            quizContainer.classList.add('center-content');\r\n            this.updateQuestionForSection3(currentSign.name, this.currentQuestionIndex + 1);\r\n        } else if (this.currentQuestionIndex >= 5) {\r\n            // Questions 6-10 (Section 2) - hide main video and update question text\r\n            videoContainer.style.display = 'none';\r\n            quizContainer.classList.add('center-content');\r\n            if (this.openaiDisabled) {\r\n                this.updateQuestionForSection2Fallback(currentSign.name, this.currentQuestionIndex + 1);\r\n            } else {\r\n                this.updateQuestionForOpenAI(currentSign.name);\r\n            }\r\n        } else {\r\n            // Questions 1-5 (Section 1) - show main video and reset question text\r\n            videoContainer.style.display = 'block';\r\n            quizContainer.classList.remove('center-content');\r\n            this.resetQuestionText();\r\n        }\r\n        \r\n        // Update UI\r\n        this.updateUI();\r\n        this.updateSidebarHighlight();\r\n        this.updateButtonVisibility();\r\n        \r\n        // Auto-play video for non-question-6\r\n        if (this.currentQuestionIndex !== 5) {\r\n            this.signVideo.play().catch(error => {\r\n                console.log('Auto-play failed:', error);\r\n            });\r\n        }\r\n    }\r\n\r\n    async showOpenAISentence(word) {\r\n        // Create or get the sentence container\r\n        let sentenceContainer = document.getElementById('ai-sentence-container');\r\n        if (!sentenceContainer) {\r\n            sentenceContainer = document.createElement('div');\r\n            sentenceContainer.id = 'ai-sentence-container';\r\n            sentenceContainer.className = 'ai-sentence-container';\r\n            \r\n            // Insert after video container\r\n            const videoContainer = document.querySelector('.video-container');\r\n            videoContainer.parentNode.insertBefore(sentenceContainer, videoContainer.nextSibling);\r\n        }\r\n        \r\n        // Show loading state\r\n        sentenceContainer.innerHTML = `\r\n            <div class=\"sentence-header\">\r\n                <h3>📝 Example Sentence for Question 6</h3>\r\n            </div>\r\n            <div class=\"sentence-content loading-sentence\">\r\n                <div class=\"sentence-spinner\"></div>\r\n                <p>Generating example sentence...</p>\r\n            </div>\r\n        `;\r\n        sentenceContainer.style.display = 'block';\r\n        \r\n        try {\r\n            // Generate sentence with OpenAI\r\n            const sentence = await this.generateSentenceWithOpenAI(word);\r\n            this.aiSentence = sentence;\r\n            \r\n            // Blank out the word to avoid revealing the answer\r\n            const blankedSentence = this.blankOutWord(sentence, word);\r\n            \r\n            // Update with generated sentence\r\n            sentenceContainer.innerHTML = `\r\n                <div class=\"sentence-header\">\r\n                    <h3>📝 Example Sentence for Question 6</h3>\r\n                </div>\r\n                <div class=\"sentence-content\">\r\n                    <p class=\"generated-sentence\">\"${blankedSentence}\"</p>\r\n                    <small class=\"sentence-note\">Generated with AI to help you understand the word in context</small>\r\n                </div>\r\n            `;\r\n        } catch (error) {\r\n            // Show error message instead of fallback\r\n            sentenceContainer.innerHTML = `\r\n                <div class=\"sentence-header\">\r\n                    <h3>❌ AI Sentence Generation Failed</h3>\r\n                </div>\r\n                <div class=\"sentence-content\">\r\n                    <p class=\"error-sentence\">Unable to generate sentence for \"${word}\"</p>\r\n                    <small class=\"sentence-note\">Please check the console for detailed error information</small>\r\n                </div>\r\n            `;\r\n            console.error('Failed to generate sentence for word:', word, error);\r\n        }\r\n    }\r\n    \r\n    blankOutWord(sentence, word) {\r\n        // Create a case-insensitive regex to find the word and its variations\r\n        const wordRegex = new RegExp(`\\\\b${word}\\\\b`, 'gi');\r\n        \r\n        // Replace the word with blanks (underscores) based on word length\r\n        const blanks = '_'.repeat(word.length);\r\n        \r\n        return sentence.replace(wordRegex, blanks);\r\n    }\r\n\r\n    updateQuestionForQ6Fallback(word) {\r\n        const questionElement = document.querySelector('.question-section h2');\r\n        \r\n        // Simple fallback question without API calls\r\n        questionElement.innerHTML = `\r\n            <div class=\"api-disabled-message\">\r\n                <p><strong>Question 6: Fill in the Blank</strong></p>\r\n                <p>Complete this sentence with the correct sign word:</p>\r\n                <p style=\"font-size: 1.2em; margin: 15px 0; font-style: italic;\">\r\n                    \"I need to practice my _______ skills every day.\"\r\n                </p>\r\n                <p style=\"font-size: 0.9em; color: #ccc; margin-top: 10px;\">\r\n                    (AI generation temporarily disabled to save usage)\r\n                </p>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    updateQuestionForSection2Fallback(word, questionNumber) {\r\n        const questionElement = document.querySelector('.question-section h2');\r\n        \r\n        // Predefined fallback sentences for Questions 6-10\r\n        const fallbackSentences = {\r\n            6: \"I need to practice my _______ skills every day.\",\r\n            7: \"Please _______ to me what you mean.\",\r\n            8: \"The weather is very _______ today.\",\r\n            9: \"I feel _______ when I understand sign language.\",\r\n            10: \"Can you _______ me the correct way to sign this?\"\r\n        };\r\n        \r\n        const sentence = fallbackSentences[questionNumber] || `The word _______ is important to learn.`;\r\n        \r\n        questionElement.innerHTML = `\r\n            <div class=\"api-disabled-message\">\r\n                <p><strong>Question ${questionNumber}: Fill in the Blank</strong></p>\r\n                <p>Complete this sentence with the correct sign word:</p>\r\n                <p style=\"font-size: 1.2em; margin: 15px 0; font-style: italic;\">\r\n                    \"${sentence}\"\r\n                </p>\r\n                <p style=\"font-size: 0.9em; color: #ccc; margin-top: 10px;\">\r\n                    (AI generation temporarily disabled to save usage)\r\n                </p>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    updateQuestionForSection3(word, questionNumber) {\r\n        const questionElement = document.querySelector('.question-section h2');\r\n        \r\n        questionElement.innerHTML = `\r\n            <div class=\"section3-question\">\r\n                <p><strong>Question ${questionNumber}: Describe the Sign</strong></p>\r\n                <p>You have been given the sign word: <strong>\"${word}\"</strong></p>\r\n                <p>Describe the steps to perform this sign's gesture:</p>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    async updateQuestionForOpenAI(word) {\r\n        const questionElement = document.querySelector('.question-section h2');\r\n        \r\n        // Show loading state\r\n        questionElement.innerHTML = `\r\n            <div class=\"ai-question-loading\">\r\n                <div class=\"sentence-spinner\"></div>\r\n                <span>Generating question...</span>\r\n            </div>\r\n        `;\r\n        \r\n        try {\r\n            // Try batch generation first for Section 2 (Q6-10) if not all cached\r\n            if (this.currentQuestionIndex >= 5 && this.currentQuestionIndex <= 9) {\r\n                const batchSuccess = await this.batchGenerateSentencesForSection2();\r\n                if (!batchSuccess) {\r\n                    console.log('🔄 Batch failed, falling back to individual generation');\r\n                }\r\n            }\r\n            \r\n            // Generate sentence with OpenAI (will use cache if available)\r\n            const sentence = await this.generateSentenceWithOpenAI(word);\r\n            this.aiSentence = sentence;\r\n            \r\n            // Blank out the word to avoid revealing the answer\r\n            const blankedSentence = this.blankOutWord(sentence, word);\r\n            \r\n            // Update question with the blanked sentence\r\n            questionElement.innerHTML = `Fill in the blank: \"${blankedSentence}\"`;\r\n            \r\n        } catch (error) {\r\n            // Check if we have a cached sentence as fallback\r\n            if (this.openaiCache[word]) {\r\n                console.log(`API failed, using cached sentence for word: ${word}`);\r\n                return this.openaiCache[word];\r\n            }\r\n            \r\n            // Show user-friendly error message for API quota limit\r\n            questionElement.innerHTML = `\r\n                <div class=\"api-limit-message\">\r\n                    <p><strong>AI Question Generation Temporarily Unavailable</strong></p>\r\n                    <p>We've reached our daily quota for AI-generated questions.</p>\r\n                    <p>Cached responses will be used when available.</p>\r\n                    <p style=\"font-style: italic; color: #666; margin-top: 10px;\">\r\n                        For now, you can still practice with the sign word: <strong>\"${word}\"</strong>\r\n                    </p>\r\n                </div>\r\n            `;\r\n            console.error('Failed to generate question for word:', word, error);\r\n        }\r\n    }\r\n    \r\n    resetQuestionText() {\r\n        const questionElement = document.querySelector('.question-section h2');\r\n        questionElement.textContent = 'What sign is being demonstrated?';\r\n    }\r\n\r\n    displayOptions(options) {\r\n        this.optionsContainer.innerHTML = '';\r\n        \r\n        // Check section type based on question index\r\n        const isSection3 = this.currentQuestionIndex >= 10; // Questions 11-15\r\n        const isSection2 = this.currentQuestionIndex >= 5 && this.currentQuestionIndex <= 9; // Questions 6-10\r\n        \r\n        if (isSection3) {\r\n            // For Section 3 questions, show text input for describing steps\r\n            this.optionsContainer.className = 'options-container section3-input';\r\n            \r\n            const inputContainer = document.createElement('div');\r\n            inputContainer.className = 'section3-input-container';\r\n            \r\n            // Check if there's a previous answer\r\n            const previousAnswer = this.userAnswers[this.currentQuestionIndex];\r\n            const previousText = previousAnswer ? previousAnswer.userAnswer : '';\r\n            \r\n            inputContainer.innerHTML = `\r\n                <div class=\"input-label\">\r\n                    <label for=\"section3-textarea\">Describe the steps to perform this sign:</label>\r\n                </div>\r\n                <textarea \r\n                    id=\"section3-textarea\" \r\n                    class=\"section3-textarea\" \r\n                    placeholder=\"Enter your description of how to perform this sign gesture...\"\r\n                    rows=\"6\"\r\n                >${previousText}</textarea>\r\n                <div class=\"input-helper\">\r\n                    <small>Describe the hand movements, position, and any other relevant details.</small>\r\n                </div>\r\n            `;\r\n            \r\n            this.optionsContainer.appendChild(inputContainer);\r\n            \r\n            // Add event listener for text input\r\n            const textarea = inputContainer.querySelector('.section3-textarea');\r\n            textarea.addEventListener('input', () => {\r\n                const currentSign = this.signs[this.currentQuestionIndex];\r\n                this.selectTextAnswer(textarea.value, currentSign);\r\n            });\r\n            \r\n        } else if (isSection2) {\r\n            // For Section 2 questions, show video options\r\n            this.optionsContainer.className = 'options-container video-options';\r\n            \r\n            options.forEach((option, index) => {\r\n                const optionDiv = document.createElement('div');\r\n                optionDiv.className = 'video-option-btn';\r\n                \r\n                // Check if this option was previously selected\r\n                const previousAnswer = this.userAnswers[this.currentQuestionIndex];\r\n                if (previousAnswer && previousAnswer.userAnswer === option.name) {\r\n                    optionDiv.classList.add('selected');\r\n                }\r\n                \r\n                optionDiv.innerHTML = `\r\n                    <video class=\"option-video\" muted loop>\r\n                        <source src=\"data:video/mp4;base64,${option.base64}\" type=\"video/mp4\">\r\n                        Your browser does not support the video tag.\r\n                    </video>\r\n                    <div class=\"option-label\">${String.fromCharCode(65 + index)}</div>\r\n                `;\r\n                \r\n                optionDiv.onclick = () => this.selectAnswer(option, optionDiv);\r\n                \r\n                // Add hover events to play/pause videos\r\n                const video = optionDiv.querySelector('.option-video');\r\n                \r\n                optionDiv.addEventListener('mouseenter', () => {\r\n                    video.play().catch(error => {\r\n                        console.log('Video autoplay failed:', error);\r\n                    });\r\n                });\r\n                \r\n                optionDiv.addEventListener('mouseleave', () => {\r\n                    video.pause();\r\n                    video.currentTime = 0;\r\n                });\r\n                \r\n                this.optionsContainer.appendChild(optionDiv);\r\n                \r\n                // Start playing the video after a short delay to ensure it's loaded\r\n                setTimeout(() => {\r\n                    video.play().catch(error => {\r\n                        console.log('Initial video play failed:', error);\r\n                    });\r\n                }, 100 * index); // Stagger the start times slightly\r\n            });\r\n        } else {\r\n            // For Section 1 questions, show text cards in 2x2 grid\r\n            this.optionsContainer.className = 'options-container text-cards';\r\n            \r\n            options.forEach((option, index) => {\r\n                const optionCard = document.createElement('div');\r\n                optionCard.className = 'text-option-card';\r\n                \r\n                // Check if this option was previously selected\r\n                const previousAnswer = this.userAnswers[this.currentQuestionIndex];\r\n                if (previousAnswer && previousAnswer.userAnswer === option.name) {\r\n                    optionCard.classList.add('selected');\r\n                }\r\n                \r\n                optionCard.innerHTML = `\r\n                    <div class=\"card-content\">\r\n                        <div class=\"option-text\">${option.name}</div>\r\n                    </div>\r\n                    <div class=\"option-label\">${String.fromCharCode(65 + index)}</div>\r\n                `;\r\n                \r\n                optionCard.onclick = () => this.selectAnswer(option, optionCard);\r\n                this.optionsContainer.appendChild(optionCard);\r\n            });\r\n        }\r\n    }\r\n\r\n    selectAnswer(selectedSign, selectedButton) {\r\n        if (this.isQuizSubmitted) return;\r\n        \r\n        // Clear previous selection based on question type\r\n        if (this.currentQuestionIndex >= 5 && this.currentQuestionIndex <= 9) {\r\n            // Section 2 - video options\r\n            const videoOptions = this.optionsContainer.querySelectorAll('.video-option-btn');\r\n            videoOptions.forEach(btn => btn.classList.remove('selected'));\r\n        } else {\r\n            // Section 1 - text cards\r\n            const textCards = this.optionsContainer.querySelectorAll('.text-option-card');\r\n            textCards.forEach(card => card.classList.remove('selected'));\r\n        }\r\n        \r\n        // Mark current selection\r\n        selectedButton.classList.add('selected');\r\n        \r\n        // Store answer without evaluation\r\n        const correctSign = this.signs[this.currentQuestionIndex];\r\n        const answerData = {\r\n            question: correctSign.name,\r\n            userAnswer: selectedSign.name,\r\n            correctAnswer: correctSign.name,\r\n            isCorrect: null // Will be evaluated on submit\r\n        };\r\n        \r\n        // Store AI sentence if this is a Section 2 question (questions 6-10)\r\n        if (this.currentQuestionIndex >= 5 && this.currentQuestionIndex < 10 && this.aiSentence) {\r\n            answerData.aiSentence = this.aiSentence;\r\n        }\r\n        \r\n        this.userAnswers[this.currentQuestionIndex] = answerData;\r\n        \r\n        this.updateButtonVisibility();\r\n        this.updateSidebarHighlight();\r\n        this.updateProgressBar(); // Update progress when answer is selected\r\n    }\r\n\r\n    selectTextAnswer(userText, correctSign) {\r\n        if (this.isQuizSubmitted) return;\r\n        \r\n        // Store text answer without evaluation (will be manually graded)\r\n        this.userAnswers[this.currentQuestionIndex] = {\r\n            question: correctSign.name,\r\n            userAnswer: userText.trim(),\r\n            correctAnswer: `Describe the steps to perform the \"${correctSign.name}\" sign`,\r\n            isCorrect: null // Will need manual evaluation\r\n        };\r\n        \r\n        this.updateButtonVisibility();\r\n        this.updateSidebarHighlight();\r\n        this.updateProgressBar();\r\n    }\r\n\r\n    updateButtonVisibility() {\r\n        const currentAnswer = this.userAnswers[this.currentQuestionIndex];\r\n        const hasAnswer = currentAnswer !== null && \r\n                         (this.currentQuestionIndex < 10 || \r\n                          (this.currentQuestionIndex >= 10 && currentAnswer.userAnswer.trim().length > 0));\r\n        const isLastQuestion = this.currentQuestionIndex === this.signs.length - 1;\r\n        const allAnswered = this.userAnswers.every(answer => \r\n            answer !== null && \r\n            (answer.userAnswer !== null && answer.userAnswer.toString().trim().length > 0));\r\n        \r\n        // Hide replay button for Section 3 questions (11-15) since there's no video\r\n        if (this.currentQuestionIndex >= 10) {\r\n            this.replayBtn.classList.add('hidden');\r\n        } else {\r\n            this.replayBtn.classList.remove('hidden');\r\n        }\r\n        \r\n        // Show next button if answered and not last question\r\n        if (hasAnswer && !isLastQuestion) {\r\n            this.nextBtn.classList.remove('hidden');\r\n        } else {\r\n            this.nextBtn.classList.add('hidden');\r\n        }\r\n        \r\n        // Show submit button if all questions answered\r\n        if (allAnswered && !this.isQuizSubmitted) {\r\n            this.submitBtn.classList.remove('hidden');\r\n        } else {\r\n            this.submitBtn.classList.add('hidden');\r\n        }\r\n    }\r\n\r\n    async submitQuiz() {\r\n        this.isQuizSubmitted = true;\r\n        this.score = 0;\r\n        \r\n        // Show loading message for Section 3 evaluation if needed\r\n        const hasSection3Answers = this.userAnswers.slice(10).some(answer => \r\n            answer && answer.userAnswer && answer.userAnswer.trim().length > 0);\r\n        \r\n        if (hasSection3Answers && !this.openaiDisabled) {\r\n            this.showEvaluationLoading();\r\n        }\r\n        \r\n        // Evaluate Section 1 & 2 answers (multiple choice)\r\n        this.userAnswers.forEach((answer, index) => {\r\n            if (answer && index < 10) { // Only sections 1 & 2\r\n                answer.isCorrect = answer.userAnswer === answer.correctAnswer;\r\n                if (answer.isCorrect) {\r\n                    this.score++;\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Evaluate Section 3 answers with OpenAI (if not disabled)\r\n        if (hasSection3Answers && !this.openaiDisabled) {\r\n            try {\r\n                await this.evaluateSection3Answers();\r\n            } catch (error) {\r\n                console.error('Failed to evaluate Section 3 answers:', error);\r\n                // The evaluateSection3Answers method now handles fallback internally\r\n                // No additional action needed here\r\n            }\r\n        } else if (hasSection3Answers) {\r\n            // OpenAI disabled - mark as pending manual review\r\n            this.userAnswers.slice(10).forEach(answer => {\r\n                if (answer) {\r\n                    answer.isCorrect = null;\r\n                    answer.evaluation = \"Manual evaluation required (AI evaluation disabled)\";\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Update sidebar to show correct/incorrect status immediately\r\n        this.updateSidebarHighlight();\r\n        \r\n        // Update progress bar to 100% before showing results\r\n        this.progressFill.style.width = '100%';\r\n        this.progressText.textContent = '100% Complete';\r\n        \r\n        this.showResults();\r\n    }\r\n\r\n    replayVideo() {\r\n        if (this.currentQuestionIndex >= 5 && this.currentQuestionIndex <= 9) {\r\n            // Section 2 (Questions 6-10) - replay all option videos\r\n            const optionVideos = this.optionsContainer.querySelectorAll('.option-video');\r\n            optionVideos.forEach(video => {\r\n                video.currentTime = 0;\r\n                video.play().catch(error => {\r\n                    console.log('Video replay failed:', error);\r\n                });\r\n            });\r\n        } else {\r\n            // Section 1 (Questions 1-5) - replay main video\r\n            this.signVideo.currentTime = 0;\r\n            this.signVideo.play();\r\n        }\r\n    }\r\n\r\n    nextQuestion() {\r\n        this.currentQuestionIndex++;\r\n        \r\n        if (this.currentQuestionIndex < this.signs.length) {\r\n            this.displayQuestion();\r\n        } else {\r\n            this.showResults();\r\n        }\r\n    }\r\n\r\n    updateUI() {\r\n        this.questionCounterElement.textContent = `Question ${this.currentQuestionIndex + 1} of ${this.signs.length}`;\r\n        this.updateProgressBar();\r\n    }\r\n    \r\n    updateProgressBar() {\r\n        const totalQuestions = this.signs.length;\r\n        const answeredQuestions = this.userAnswers.filter(answer => answer !== null).length;\r\n        const progressPercentage = Math.round((answeredQuestions / totalQuestions) * 100);\r\n        \r\n        this.progressFill.style.width = `${progressPercentage}%`;\r\n        this.progressText.textContent = `${progressPercentage}% Complete`;\r\n    }\r\n\r\n    showResults() {\r\n        this.quizContainer.classList.add('hidden');\r\n        this.resultsContainer.classList.remove('hidden');\r\n        this.isInResultsSummary = true; // Set flag when showing results\r\n        \r\n        const percentage = Math.round((this.score / this.signs.length) * 100);\r\n        this.finalScoreElement.textContent = `Your Score: ${this.score}/${this.signs.length} (${percentage}%)`;\r\n        \r\n        // Start the complete quiz replay chat\r\n        this.startQuizReplayChat();\r\n        \r\n        // Update sidebar to show no current question\r\n        this.updateSidebarHighlight();\r\n    }\r\n    \r\n    async startQuizReplayChat() {\r\n        const chatMessages = document.getElementById('chat-messages');\r\n        chatMessages.innerHTML = '';\r\n        \r\n        // Reset skip flag and show skip button\r\n        this.chatSkipAnimations = false;\r\n        this.chatSkipBtn.classList.remove('hidden');\r\n        \r\n        // Welcome message\r\n        await this.addChatMessage('bot', `🎉 Let's review your Sign Language Quiz journey together!`);\r\n        await this.delay(1000);\r\n        \r\n        await this.addChatMessage('bot', `I'll replay each question, show your answers, and give you feedback. Ready? 🚀`);\r\n        await this.delay(1500);\r\n        \r\n        // Replay each question as a conversation\r\n        for (let i = 0; i < this.signs.length; i++) {\r\n            await this.replayQuestionAsChat(i);\r\n            \r\n            // Add a small pause between questions (except for the last one)\r\n            if (i < this.signs.length - 1) {\r\n                await this.delay(800);\r\n            }\r\n        }\r\n        \r\n        // Final summary\r\n        await this.delay(1000);\r\n        await this.showFinalSummary();\r\n    }\r\n    \r\n    async replayQuestionAsChat(questionIndex) {\r\n        const sign = this.signs[questionIndex];\r\n        const answer = this.userAnswers[questionIndex];\r\n        \r\n        // Bot asks the question\r\n        if (questionIndex < 5) {\r\n            // Section 1: Text-based questions\r\n            await this.addChatMessage('bot', `<strong>Question ${questionIndex + 1}:</strong> What sign was being demonstrated?`);\r\n        } else if (questionIndex < 10) {\r\n            // Section 2: Video-based questions - use AI generated sentence with blanks\r\n            let sentenceText = \"I need to practice my ___ skills every day\";\r\n            \r\n            // Try to get the AI generated sentence from the stored answer\r\n            if (answer && answer.aiSentence) {\r\n                // Replace the sign name with blanks in the sentence\r\n                const signName = sign.name.toLowerCase();\r\n                const blankLength = signName.length;\r\n                const blanks = '_'.repeat(blankLength);\r\n                \r\n                // Create case-insensitive regex to find and replace the sign name\r\n                const regex = new RegExp(`\\\\b${signName}\\\\b`, 'gi');\r\n                sentenceText = answer.aiSentence.replace(regex, blanks);\r\n                \r\n                // If no replacement occurred, try partial matches or fallback\r\n                if (sentenceText === answer.aiSentence) {\r\n                    // Try to find the sign name as part of a word\r\n                    const partialRegex = new RegExp(signName, 'gi');\r\n                    if (partialRegex.test(answer.aiSentence)) {\r\n                        sentenceText = answer.aiSentence.replace(partialRegex, blanks);\r\n                    } else {\r\n                        // Fallback: just add blanks at the end\r\n                        sentenceText = `I need to practice my ${blanks} skills every day`;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            await this.addChatMessage('bot', `<strong>Question ${questionIndex + 1}:</strong> \"${sentenceText}\"`);\r\n        } else {\r\n            // Section 3: Description questions\r\n            await this.addChatMessage('bot', `<strong>Question ${questionIndex + 1}:</strong> You have been given the sign word: \"<strong>${sign.name}</strong>\" Describe the steps to perform this sign's gesture:`);\r\n        }\r\n        \r\n        await this.delay(1000);\r\n        \r\n        // User's answer\r\n        if (answer) {\r\n            if (questionIndex < 10) {\r\n                // Multiple choice answer\r\n                await this.addChatMessage('user', `${answer.userAnswer}`);\r\n            } else {\r\n                // Text description (show preview if too long)\r\n                const answerText = answer.userAnswer.length > 150 \r\n                    ? answer.userAnswer.substring(0, 150) + '...' \r\n                    : answer.userAnswer;\r\n                await this.addChatMessage('user', answerText);\r\n            }\r\n        } else {\r\n            await this.addChatMessage('user', `<em>No answer provided</em>`);\r\n        }\r\n        \r\n        await this.delay(800);\r\n        \r\n        // Bot's evaluation/feedback\r\n        await this.provideBotFeedback(questionIndex, sign, answer);\r\n    }\r\n    \r\n    async provideBotFeedback(questionIndex, sign, answer) {\r\n        if (!answer) {\r\n            await this.addChatMessage('bot', `❌ You didn't answer this question. The correct answer was: <strong>\"${sign.name}\"</strong>`);\r\n            return;\r\n        }\r\n        \r\n        if (questionIndex < 10) {\r\n            // Multiple choice feedback\r\n            if (answer.isCorrect) {\r\n                const encouragements = [\r\n                    \"✅ Perfect! Great job!\",\r\n                    \"✅ Excellent! You got it right!\",\r\n                    \"✅ Correct! Well done!\",\r\n                    \"✅ That's right! Nice work!\",\r\n                    \"✅ Spot on! Keep it up!\"\r\n                ];\r\n                const randomEncouragement = encouragements[Math.floor(Math.random() * encouragements.length)];\r\n                await this.addChatMessage('bot', randomEncouragement);\r\n            } else {\r\n                await this.addChatMessage('bot', `❌ Not quite right. You answered \"<strong>${answer.userAnswer}</strong>\" but the correct answer was \"<strong>${sign.name}</strong>\". Keep practicing! 💪`);\r\n            }\r\n        } else {\r\n            // Section 3: Description feedback\r\n            if (answer.evaluation) {\r\n                let feedbackIcon = '📝';\r\n                let feedbackIntro = 'Here\\'s my evaluation of your description:';\r\n                \r\n                if (answer.score >= 8) {\r\n                    feedbackIcon = '🌟';\r\n                    feedbackIntro = 'Excellent description! Here\\'s my detailed feedback:';\r\n                } else if (answer.score >= 6) {\r\n                    feedbackIcon = '👍';\r\n                    feedbackIntro = 'Good description! Here\\'s how you can improve:';\r\n                } else if (answer.score >= 4) {\r\n                    feedbackIcon = '📝';\r\n                    feedbackIntro = 'You\\'re on the right track! Here\\'s my feedback:';\r\n                } else {\r\n                    feedbackIcon = '💡';\r\n                    feedbackIntro = 'Here are some tips to improve your description:';\r\n                }\r\n                \r\n                const scoreClass = answer.score >= 7 ? 'high' : answer.score >= 4 ? 'medium' : 'low';\r\n                const feedbackHtml = `\r\n                    <div>${feedbackIcon} ${feedbackIntro}</div>\r\n                    <div style=\"margin: 10px 0; padding: 12px; background: rgba(255,255,255,0.15); border-radius: 8px; border-left: 4px solid ${answer.score >= 7 ? '#48bb78' : answer.score >= 4 ? '#ed8936' : '#f56565'};\">\r\n                        <div style=\"margin-bottom: 8px;\"><strong>Score: ${answer.score}/10</strong></div>\r\n                        <div>${answer.evaluation}</div>\r\n                    </div>\r\n                `;\r\n                await this.addChatMessage('bot', feedbackHtml);\r\n            } else {\r\n                await this.addChatMessage('bot', `📝 I wasn't able to evaluate your description due to technical limitations, but thank you for your detailed response about the \"${sign.name}\" sign!`);\r\n            }\r\n        }\r\n    }\r\n    \r\n    async showFinalSummary() {\r\n        const percentage = Math.round((this.score / this.signs.length) * 100);\r\n        \r\n        await this.addChatMessage('bot', `🎊 <strong>Quiz Complete!</strong> Here's your final summary:`);\r\n        await this.delay(1000);\r\n        \r\n        // Overall score with encouragement\r\n        const scoreMessage = `📊 <strong>Final Score: ${this.score}/${this.signs.length} (${percentage}%)</strong>`;\r\n        let encouragement = '';\r\n        if (percentage >= 90) {\r\n            encouragement = \"🏆 Outstanding! You're a sign language champion!\";\r\n        } else if (percentage >= 80) {\r\n            encouragement = \"🌟 Excellent work! You have great sign language skills!\";\r\n        } else if (percentage >= 70) {\r\n            encouragement = \"👏 Well done! You're making great progress!\";\r\n        } else if (percentage >= 60) {\r\n            encouragement = \"� Good effort! Keep practicing and you'll improve!\";\r\n        } else {\r\n            encouragement = \"📚 Great start! Sign language takes practice - you're on the right path!\";\r\n        }\r\n        \r\n        await this.addChatMessage('bot', `${scoreMessage}<br><br>${encouragement}`);\r\n        await this.delay(1000);\r\n        \r\n        // Section breakdown\r\n        await this.addChatMessage('bot', `📈 <strong>Section Breakdown:</strong>`);\r\n        await this.delay(500);\r\n        \r\n        const section1Score = this.userAnswers.slice(0, 5).filter(answer => answer && answer.isCorrect).length;\r\n        const section2Score = this.userAnswers.slice(5, 10).filter(answer => answer && answer.isCorrect).length;\r\n        const section3Score = this.userAnswers.slice(10, 15).filter(answer => answer && answer.isCorrect).length;\r\n        \r\n        const breakdownHtml = `\r\n            <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px; margin: 10px 0;\">\r\n                <div style=\"margin-bottom: 10px;\">� <strong>Section 1 (Text Recognition):</strong> ${section1Score}/5</div>\r\n                <div style=\"margin-bottom: 10px;\">📹 <strong>Section 2 (Video Recognition):</strong> ${section2Score}/5</div>\r\n                <div style=\"margin-bottom: 10px;\">✍️ <strong>Section 3 (Sign Description):</strong> ${section3Score}/5</div>\r\n            </div>\r\n        `;\r\n        \r\n        await this.addChatMessage('bot', breakdownHtml);\r\n        await this.delay(1000);\r\n        \r\n        await this.addChatMessage('bot', `🔍 Want to dive deeper into specific questions? Use the \"<strong>Review Answers</strong>\" button above for detailed analysis!`);\r\n        await this.delay(500);\r\n        \r\n        await this.addChatMessage('bot', `Thanks for taking the Sign Language Quiz! Keep practicing and you'll continue to improve! 🌟`);\r\n        \r\n        // Hide skip button when chat is complete\r\n        this.chatSkipBtn.classList.add('hidden');\r\n    }\r\n    \r\n    async addChatMessage(type, content) {\r\n        const chatMessages = document.getElementById('chat-messages');\r\n        \r\n        // Add typing indicator for bot messages (only if animations are enabled)\r\n        if (type === 'bot' && !this.chatSkipAnimations) {\r\n            const typingDiv = document.createElement('div');\r\n            typingDiv.className = 'chat-message bot typing-indicator';\r\n            typingDiv.innerHTML = `\r\n                <div class=\"message-avatar bot\"></div>\r\n                <div class=\"message-bubble bot\">\r\n                    <div class=\"typing-dots\">\r\n                        <div class=\"typing-dot\"></div>\r\n                        <div class=\"typing-dot\"></div>\r\n                        <div class=\"typing-dot\"></div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            chatMessages.appendChild(typingDiv);\r\n            chatMessages.scrollTop = chatMessages.scrollHeight;\r\n            \r\n            await this.delay(800);\r\n            chatMessages.removeChild(typingDiv);\r\n        }\r\n        \r\n        // Add actual message\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `chat-message ${type}`;\r\n        \r\n        const avatar = type === 'bot' ? '' : '👤';\r\n        const avatarClass = type === 'bot' ? 'bot' : 'user';\r\n        \r\n        messageDiv.innerHTML = `\r\n            <div class=\"message-avatar ${avatarClass}\">${avatar}</div>\r\n            <div class=\"message-bubble ${type}\">\r\n                <div class=\"message-text\">${content}</div>\r\n            </div>\r\n        `;\r\n        \r\n        chatMessages.appendChild(messageDiv);\r\n        chatMessages.scrollTop = chatMessages.scrollHeight;\r\n        \r\n        return new Promise(resolve => setTimeout(resolve, this.chatSkipAnimations ? 0 : 200));\r\n    }\r\n    \r\n    delay(ms) {\r\n        if (this.chatSkipAnimations) {\r\n            return Promise.resolve(); // Skip delay when animations are disabled\r\n        }\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    skipChatAnimations() {\r\n        this.chatSkipAnimations = true;\r\n        this.chatSkipBtn.classList.add('hidden');\r\n        \r\n        // Speed up the current chat replay by resolving any pending delays\r\n        // This will make the remaining messages appear instantly\r\n    }\r\n\r\n    restartQuiz() {\r\n        this.resultsContainer.classList.add('hidden');\r\n        this.loadingElement.classList.remove('hidden');\r\n        \r\n        // Reset quiz state\r\n        this.isQuizSubmitted = false;\r\n        this.currentReviewIndex = 0;\r\n        this.isInReviewMode = false; // Reset review mode flag\r\n        this.isInResultsSummary = false; // Reset results summary flag\r\n        \r\n        // Reset review mode\r\n        this.exitReviewMode();\r\n        \r\n        // Only shuffle existing data - no need to reload from Firestore\r\n        this.shuffleArray(this.signs);\r\n        setTimeout(() => {\r\n            this.hideLoading();\r\n            this.generateSidebar();\r\n            this.startQuiz();\r\n        }, 500); // Reduced delay since no network calls\r\n    }\r\n    \r\n    // Review Mode Methods\r\n    enterReviewMode() {\r\n        this.currentReviewIndex = 0;\r\n        this.isInReviewMode = true;\r\n        this.isInResultsSummary = false; // No longer viewing summary\r\n        this.resultsSummary.classList.add('hidden');\r\n        this.reviewMode.classList.remove('hidden');\r\n        this.reviewModeBtn.classList.add('hidden');\r\n        this.summaryModeBtn.classList.remove('hidden');\r\n        this.displayReviewQuestion();\r\n        this.updateSidebarHighlight(); // Update sidebar to show review mode\r\n    }\r\n    \r\n    exitReviewMode() {\r\n        this.isInReviewMode = false;\r\n        this.isInResultsSummary = true; // Back to viewing summary\r\n        this.resultsSummary.classList.remove('hidden');\r\n        this.reviewMode.classList.add('hidden');\r\n        this.reviewModeBtn.classList.remove('hidden');\r\n        this.summaryModeBtn.classList.add('hidden');\r\n        this.updateSidebarHighlight(); // Reset sidebar highlight\r\n    }\r\n    \r\n    displayReviewQuestion() {\r\n        const answer = this.userAnswers[this.currentReviewIndex];\r\n        const sign = this.signs[this.currentReviewIndex];\r\n        \r\n        // Update header\r\n        this.reviewQuestionTitle.textContent = `Question ${this.currentReviewIndex + 1} of ${this.signs.length}`;\r\n        this.reviewQuestionCounter.textContent = `${this.currentReviewIndex + 1} / ${this.signs.length}`;\r\n        \r\n        // Check if this is a Section 3 question (questions 11-15)\r\n        const isSection3 = this.currentReviewIndex >= 10;\r\n        \r\n        if (isSection3) {\r\n            // Section 3 - Text input with AI evaluation\r\n            this.handleSection3Review(answer, sign);\r\n        } else {\r\n            // Section 1 & 2 - Multiple choice\r\n            this.handleMultipleChoiceReview(answer, sign);\r\n        }\r\n        \r\n        // Update navigation buttons\r\n        this.reviewPrevBtn.disabled = this.currentReviewIndex === 0;\r\n        this.reviewNextBtn.disabled = this.currentReviewIndex === this.signs.length - 1;\r\n    }\r\n    \r\n    handleMultipleChoiceReview(answer, sign) {\r\n        // Update status\r\n        this.reviewStatus.textContent = answer.isCorrect ? 'Correct' : 'Incorrect';\r\n        this.reviewStatus.className = `review-status ${answer.isCorrect ? 'correct' : 'incorrect'}`;\r\n        \r\n        // Show video container and traditional review answers, hide Section 3 elements\r\n        this.reviewVideoContainer.classList.remove('hidden');\r\n        this.showTraditionalReviewAnswers();\r\n        this.hideSection3ReviewElements();\r\n        \r\n        // Set video\r\n        this.reviewVideo.src = `data:video/mp4;base64,${sign.base64}`;\r\n        this.reviewVideo.play().catch(error => {\r\n            console.log('Auto-play failed:', error);\r\n        });\r\n        \r\n        // Update answers\r\n        this.reviewUserAnswer.textContent = answer.userAnswer;\r\n        this.reviewUserAnswer.className = `answer-value ${answer.isCorrect ? 'correct' : 'incorrect'}`;\r\n        \r\n        this.reviewCorrectAnswer.textContent = answer.correctAnswer;\r\n        this.reviewCorrectAnswer.className = 'answer-value neutral';\r\n        \r\n        // Show sentence for Section 2 questions (6-10) in review mode\r\n        if (this.currentReviewIndex >= 5 && this.currentReviewIndex <= 9) {\r\n            const word = sign.name;\r\n            const cachedSentence = this.openaiCache[word];\r\n            if (cachedSentence) {\r\n                this.showReviewSentence(word, cachedSentence);\r\n            } else {\r\n                this.hideReviewSentence();\r\n            }\r\n        } else {\r\n            this.hideReviewSentence();\r\n        }\r\n    }\r\n    \r\n    handleSection3Review(answer, sign) {\r\n        // Update status based on evaluation score\r\n        const hasEvaluation = answer.evaluation && answer.score !== undefined;\r\n        if (hasEvaluation) {\r\n            const scoreText = `Score: ${answer.score}/10`;\r\n            this.reviewStatus.textContent = answer.isCorrect ? `Correct (${scoreText})` : `Needs Improvement (${scoreText})`;\r\n            this.reviewStatus.className = `review-status ${answer.isCorrect ? 'correct' : 'incorrect'}`;\r\n        } else {\r\n            this.reviewStatus.textContent = 'Evaluation Pending';\r\n            this.reviewStatus.className = 'review-status incorrect';\r\n        }\r\n        \r\n        // Show video container and hide traditional review answers for Section 3\r\n        this.reviewVideoContainer.classList.remove('hidden');\r\n        this.hideTraditionalReviewAnswers();\r\n        \r\n        // Set video for Section 3\r\n        this.reviewVideo.src = `data:video/mp4;base64,${sign.base64}`;\r\n        this.reviewVideo.play().catch(error => {\r\n            console.log('Auto-play failed:', error);\r\n        });\r\n        \r\n        // Show Section 3 specific elements\r\n        this.showSection3ReviewElements(answer, sign);\r\n        \r\n        // Hide sentence display for Section 3\r\n        this.hideReviewSentence();\r\n    }\r\n    \r\n    showSection3ReviewElements(answer, sign) {\r\n        // Create or get Section 3 review container\r\n        let section3ReviewContainer = document.getElementById('section3-review-container');\r\n        if (!section3ReviewContainer) {\r\n            section3ReviewContainer = document.createElement('div');\r\n            section3ReviewContainer.id = 'section3-review-container';\r\n            section3ReviewContainer.className = 'section3-review-container';\r\n            \r\n            // Insert after the review answers div\r\n            const reviewAnswers = document.querySelector('.review-answers');\r\n            reviewAnswers.parentNode.insertBefore(section3ReviewContainer, reviewAnswers.nextSibling);\r\n        }\r\n        \r\n        // Display Section 3 question and evaluation\r\n        const questionText = `Describe how to perform the sign for \"${sign.name}\":`;\r\n        const userAnswer = answer.userAnswer || 'No answer provided';\r\n        const evaluation = answer.evaluation || 'Evaluation not available';\r\n        const score = answer.score || 0;\r\n        \r\n        section3ReviewContainer.innerHTML = `\r\n            <div class=\"section3-review-question\">\r\n                <h4>Question:</h4>\r\n                <p>${questionText}</p>\r\n            </div>\r\n            \r\n            <div class=\"section3-review-answer\">\r\n                <h4>Your Answer:</h4>\r\n                <div class=\"user-answer-text\">${userAnswer}</div>\r\n            </div>\r\n            \r\n            <div class=\"section3-evaluation\">\r\n                <div class=\"evaluation-score ${score >= 7 ? 'high-score' : 'low-score'}\">\r\n                    <span>AI Evaluation Score:</span>\r\n                    <span class=\"score-value\">${score}/10</span>\r\n                </div>\r\n                <div class=\"evaluation-feedback\">\r\n                    ${evaluation}\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        section3ReviewContainer.classList.remove('hidden');\r\n    }\r\n    \r\n    hideSection3ReviewElements() {\r\n        const section3ReviewContainer = document.getElementById('section3-review-container');\r\n        if (section3ReviewContainer) {\r\n            section3ReviewContainer.classList.add('hidden');\r\n        }\r\n    }\r\n    \r\n    hideTraditionalReviewAnswers() {\r\n        const reviewAnswers = document.querySelector('.review-answers');\r\n        if (reviewAnswers) {\r\n            reviewAnswers.classList.add('hidden');\r\n        }\r\n    }\r\n    \r\n    showTraditionalReviewAnswers() {\r\n        const reviewAnswers = document.querySelector('.review-answers');\r\n        if (reviewAnswers) {\r\n            reviewAnswers.classList.remove('hidden');\r\n        }\r\n    }\r\n    \r\n    reviewPreviousQuestion() {\r\n        if (this.currentReviewIndex > 0) {\r\n            this.currentReviewIndex--;\r\n            this.displayReviewQuestion();\r\n            this.updateSidebarHighlight();\r\n        }\r\n    }\r\n    \r\n    reviewNextQuestion() {\r\n        if (this.currentReviewIndex < this.signs.length - 1) {\r\n            this.currentReviewIndex++;\r\n            this.displayReviewQuestion();\r\n            this.updateSidebarHighlight();\r\n        }\r\n    }\r\n    \r\n    showReviewSentence(word, sentence) {\r\n        // Create or get the review sentence container\r\n        let reviewSentenceContainer = document.getElementById('review-sentence-container');\r\n        if (!reviewSentenceContainer) {\r\n            reviewSentenceContainer = document.createElement('div');\r\n            reviewSentenceContainer.id = 'review-sentence-container';\r\n            reviewSentenceContainer.className = 'ai-sentence-container';\r\n            \r\n            // Insert after review video container\r\n            const reviewVideoContainer = document.querySelector('.review-video-container');\r\n            reviewVideoContainer.parentNode.insertBefore(reviewSentenceContainer, reviewVideoContainer.nextSibling);\r\n        }\r\n        \r\n        // For review mode, show the original sentence with the word revealed\r\n        reviewSentenceContainer.innerHTML = `\r\n            <div class=\"sentence-header\">\r\n                <h3>📝 Example Sentence for Question 6</h3>\r\n            </div>\r\n            <div class=\"sentence-content\">\r\n                <p class=\"generated-sentence\">\"${sentence}\"</p>\r\n                <small class=\"sentence-note\">Complete sentence revealed after quiz submission</small>\r\n            </div>\r\n        `;\r\n        reviewSentenceContainer.style.display = 'block';\r\n    }\r\n    \r\n    hideReviewSentence() {\r\n        const reviewSentenceContainer = document.getElementById('review-sentence-container');\r\n        if (reviewSentenceContainer) {\r\n            reviewSentenceContainer.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize the quiz when the page loads\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const quiz = new SignLanguageQuiz();\r\n    \r\n    // Expose cache management functions globally for debugging\r\n    window.signQuizDebug = {\r\n        clearAllCache: () => quiz.clearAllCache(),\r\n        clearOpenAICache: () => quiz.clearOpenAICache(),\r\n        viewOpenAICache: () => console.log('OpenAI Cache:', quiz.openaiCache),\r\n        viewCacheStats: () => {\r\n            const openaiCount = Object.keys(quiz.openaiCache).length;\r\n            const firestoreAvailable = quiz.firestoreCache ? 'Yes' : 'No';\r\n            console.log(`Cache Stats:\r\n- OpenAI responses cached: ${openaiCount}\r\n- Firestore data cached: ${firestoreAvailable}\r\n- Data loaded from cache: ${!quiz.isDataLoaded ? 'No' : 'Yes'}\r\n- OpenAI API: ${quiz.openaiDisabled ? 'DISABLED' : 'ENABLED'}`);\r\n        },\r\n        enableOpenAI: () => {\r\n            quiz.openaiDisabled = false;\r\n            console.log('✅ OpenAI API enabled');\r\n            // Auto-generate all Section 2 sentences in batch\r\n            quiz.batchGenerateSentencesForSection2().then(() => {\r\n                console.log('🚀 All Section 2 sentences ready!');\r\n            }).catch(error => {\r\n                console.error('❌ Batch generation failed:', error);\r\n            });\r\n        },\r\n        disableOpenAI: () => {\r\n            quiz.openaiDisabled = true;\r\n            console.log('🚫 OpenAI API disabled (to save usage)');\r\n        }\r\n    };\r\n    \r\n    console.log('🔧 Debug functions available: window.signQuizDebug');\r\n    console.log('📊 Use window.signQuizDebug.viewCacheStats() to see cache status');\r\n    console.log('✅ OpenAI API is currently ENABLED by default');\r\n    console.log('🚫 Use window.signQuizDebug.disableOpenAI() to disable OpenAI and save usage');\r\n    console.log('🎯 Section 2 (Q6-10) will use AI-generated fill-in-the-blank format with video options');\r\n});\r\n\r\n// Add some CSS for error messages\r\nconst style = document.createElement('style');\r\nstyle.textContent = `\r\n    .error-message {\r\n        text-align: center;\r\n        padding: 40px 20px;\r\n        background: rgba(255, 255, 255, 0.95);\r\n        border-radius: 15px;\r\n        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n    }\r\n    \r\n    .error-message h3 {\r\n        color: #f56565;\r\n        margin-bottom: 15px;\r\n        font-size: 1.5rem;\r\n    }\r\n    \r\n    .error-message p {\r\n        color: #4a5568;\r\n        margin-bottom: 20px;\r\n        font-size: 1.1rem;\r\n    }\r\n`;\r\ndocument.head.appendChild(style);\r\n"],"names":[],"version":3,"file":"quiz.101ca548.js.map","sourceRoot":"/__parcel_source_root/"}